<?php

/**
 * @file
 * Provides integration between the SMS Framework and Drupal users.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\sms\Entity\SmsMessageInterface as SmsMessageEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\sms\Plugin\SmsGatewayPluginInterface;
use Drupal\sms\Message\SmsMessageInterface;
use Drupal\sms\Entity\SmsGatewayInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\sms\Message\SmsMessage;

define('SMS_USER_BLOCKED', 0);
define('SMS_USER_PENDING', 1);
define('SMS_USER_CONFIRMED', 2);
define('SMS_USER_SMS_REGISTERED', 3);
define('SMS_USER_MAX_CHARS', 140);

// require_once 'sms_user.actions.inc';
// require_once 'sms_user.rules.inc';

/**
 * Implements hook_entity_presave().
 */
function sms_user_entity_presave(EntityInterface $entity) {
  // Delay sending SMS message if active hours are enabled.
  if ($entity instanceof SmsMessageEntityInterface) {
    /** @var \Drupal\sms_user\ActiveHoursInterface $active_hours */
    $active_hours = \Drupal::service('sms_user.active_hours');
    $active_hours->delaySmsMessage($entity);
  }
}

/**
 * Returns the uid of the owner of a number.
 *
 * @param string $number
 *   The phone number whose owner is sought.
 * @param int $status
 *   The verification status of the number.
 *
 * @return int
 *   The uid of the owner of the number.
 */
function sms_user_get_uid($number, $status = NULL) {
  $query = db_select('sms_user', 'u')
    ->fields('u', array('uid'))
    ->condition('number', $number);

  if (isset($status)) {
    $query->condition('status', $status);
  }

  return $query->execute()->fetchField();
}

/**
 * Implements hook_sms_send_process().
 *
 * Aborts sending if the user has opted out or is in sleep mode.
 */
function sms_user_sms_send_process($step, SmsMessageInterface $sms, array $options, SmsGatewayInterface $sms_gateway) {
  if ($step == 'pre process') {
    if (\Drupal::config('sms_user.settings')->get('enable_sleep', 1) && $uid = sms_user_get_uid($sms->getRecipients()[0])) {
      $account = User::load($uid);

      if (_sms_user_opted_out($account)) {
        \Drupal::logger('sms_user')
          ->info('Message was not sent to @user because user opted out.', array('@user' => $account->getUsername()));
        return FALSE;
      }
      else {
        if (_sms_user_sleep_active($account)) {
          \Drupal::logger('sms_user')
            ->info('Message was not sent to @user due to sleep settings.', array('@user' => $account->getUsername()));
          return FALSE;
        }
      }
    }
  }
}

/**
 * Returns the user's sleep status.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account object.
 *
 * @return bool
 *   TRUE if its currently the user's sleep time.
 */
function _sms_user_sleep_active(AccountInterface $account) {
  // If the user has a timezone set in his account get the time in that timezone.
  $config = \Drupal::config('system.date');
  if ($config->get('timezone.user.configurable') && (!empty($account->timezone_name))) {
    $timezone = new DateTimeZone($account->timezone);
  }
  else {
    $default = $config->get('timezone.default');
    $timezonestring = empty($default) ? 'UTC' : $default;
    $timezone = new DateTimeZone($timezonestring);
  }
  $date = new DateTime();
  $date->setTimezone( $timezone );
  $current_hour = date('G');

  // User has individual settings, which will always override globals
  if (!empty($account->sms_user['sleep_enabled'])) {
    $start = $account->sms_user['sleep_start_time'];
    $end = $account->sms_user['sleep_end_time'];
  }
  else {
    $config = \Drupal::config('sms_user.settings');
    $start = $config->get('sleep_start_time');
    $end = $config->get('sleep_end_time');
  }

  // If values are not set, send the message
  if (($start == 0) && ($end == 0)) {
    return FALSE;
  }

  // Do 2 checks: one is where start < end
  // two is where end < start (like from 22 to 7)

  if ($start < $end) {
    if ($start <= $current_hour && $end > $current_hour) {
      return TRUE;
    }
  }
  if ($end < $start) {
    // Current time is between start and midnight.
    if ($start <= $current_hour) {
      return TRUE;
    }
    // Current time is between midnight and end.
    if ($current_hour < $end) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks if user opted out of sms messages from the site.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account object.
 *
 * @return bool
 *   TRUE if the user chose to opt out of messages from the site indefinitely.
 */
function _sms_user_opted_out(AccountInterface $account) {
  // If the users sms_user_opt_out field is set, return true.
  if (\Drupal::config('sms_user.settings')->get('allow_opt_out') && !empty($account->sms_user['opted_out'])) {
    return TRUE;
  }
  return FALSE;

}

/**
 * Form element validation callback.
 *
 * Validates that the phone number is valid for the system, and is not in use
 * by another user.
 */
function sms_user_validate_number_element($element, FormStateInterface $form_state, array $form) {
  $number = $element['#value'];

  if ($error = sms_validate_number($number)) {
    foreach ($error as $lerror) {
      $form_state->setError($element, $lerror);
    }
  }
  elseif (sms_user_get_uid($number)) {
    $form_state->setError($element, t('This phone number is already registered to another user.'));
  }
}

/**
 * Implements hook_user_insert().
 */
function sms_user_user_insert($account) {
  return sms_user_save($account);
}

/**
 * Implements hook_user_update().
 */
function sms_user_user_update($account) {
  return sms_user_save($account);
}

/**
 * Implements hook_user_view().
 */
function sms_user_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display, $view_mode) {
  $account = \Drupal::currentUser();
  if ($account->hasPermission('receive sms') && ($account->id() == $account->id() || $account->hasPermission('administer smsframework'))) {
    if (isset($account->sms_user['status']) && $account->sms_user['status'] == SMS_USER_PENDING) {
      drupal_set_message(t('You need to confirm your mobile number, <a href="@mobile_url">enter the confirmation code sent to your mobile</a>.', array('@mobile_url' => url('user/' . $account->id() . '/edit/mobile'))));
    }
    $build['sms'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Mobile'),
    );
    $build['sms']['number'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#markup' => isset($account->sms_user['number']) ? $account->sms_user['number'] : '',
    );
    if (\Drupal::config('sms_user.settings')->get('enable_sleep') && !empty($account->sms_user['sleep_enabled'])) {
      $build['sms']['sleep'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => t('You will not receive messages between ' . $account->sms_user['sleep_start_time'] . ':00 and ' .$account->sms_user['sleep_end_time'] . ':00'),
      );
    }
    if (\Drupal::config('sms_user.settings')->get('allow_opt_out') && !empty($account->sms_user['opted_out'])) {
      $build['sms']['opted_out'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => t('You will not receive any messages from the site.'),
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function sms_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == "user_register_form") {
    $config = \Drupal::config('sms_user.settings');
    if ($config->get('registration_form')) {
      $form['sms_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('Mobile settings'),
        '#description' => t('You will receive a message to confirm your mobile information upon login.'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
      );

      $required = FALSE;
      if ($config->get('registration_form') == 2) {
        $required = TRUE;
      }

      $form['sms_user'] += sms_send_form($required);
      $form['sms_user']['number']['#element_validate'] = array('sms_user_validate_number_element');

      return $form;
    }
  }
  return $form;
}

/**
 * Implements hook_tokens().
 */
function sms_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'sms_user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'confirm-code':
            $replacements[$original] = $data['confirm-code'];
          break;
        case 'mobile-url':
            $replacements[$original] = Url::fromRoute('sms_user.user_edit', array('user' => \Drupal::currentUser()))->setAbsolute()->toString();
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function sms_user_token_info() {
  $info['types']['sms_user'] = array(
    'name' => t('SMS User'),
    'description' => t('Tokens related to a users\' sms settings.'),
    'needs-data' => 'user',
  );
  $info['tokens']['sms_user']['confirm-code'] = array(
    'name' => t('Confirmation code'),
    'description' => t('The mobile confirmation code for the user.'),
    'type' => 'sms_user',
  );
  $info['tokens']['sms_user']['mobile-url'] = array(
    'name' => t('Mobile URL'),
    'description' => t('The URL for the user\'s mobile settings page.'),
    'type' => 'sms_user',
  );
  return $info;
}

/**
 * Implements hook_sms_incoming().
 */
function sms_user_sms_incoming($op, SmsMessageInterface $sms, array $options) {
  $config = \Drupal::config('sms_user.settings');
  $number = $sms->getRecipients()[0];
  $message = $sms->getMessage();
  switch ($op) {
    case 'pre process':
      if ($account = sms_user_authenticate($number)) {
        $metadata = array(
          'login' => TRUE,
          'number' => $number,
          'message' => $message,
          'options' => $options,
        );
        sms_user_login_metadata($account->id(), $metadata);
        // @todo fix this in https://www.drupal.org/node/2401699
        // _sms_user_switch($account);
      }
      elseif ($config->get('registration_enabled') && $number) {
        if ($account = sms_user_register_new_user($number, $message, $options)) {
          // Send the new user the registration message if one exists.
          if ($message = $config->get('new_account_message')) {
            /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
            $phone_number_provider = \Drupal::service('sms.phone_number');
            $sms_message = new SmsMessage();
            $sms_message->setMessage($message);
            $phone_number_provider->sendMessage($account, $sms_message);
          }
        }
      }
      break;
    case 'post process':
      // @todo fix this in https://www.drupal.org/node/2401699
      // _sms_user_switch();
      break;
  }
}

/**
 * Stores metadata related to SMS users registering/logging in.
 *
 * Drupal core does not really provide a way to pass user metadata around that's
 * related to a user registering (meaning during the registration cycle), so we
 * provide a storage mechanism here.
 *
 * Since it seems sloppy to handle registration cycles with one method and
 * logins with another, this function handles all SMS-related metadata related
 * to logging in and registering.
 *
 * The data is placed in this storage mechansim for the duration of the page
 * load, and is placed here before the user hooks are invoked by sms_user,
 * therefore it should be available to all modules that need it.
 *
 * @param int $uid
 *   (optional) The uid of the user to store/fetch.  Defaults to null, in which
 *   case returns all cached accounts.
 * @param array $metadata
 *   (optional) The metadata to store, or the metadata to fetch if NULL or not
 *   supplied. The metadata is stored/retrieved as an associative array with the
 *   following key/value pairs:
 *     - register: bool Indicates that the user is just registering.
 *     - login: bool Indicates that the user is logging in.
 *     - number: string The SMS number the message was sent from.
 *     - message: string The SMS message sent with the registration/login.
 *     - options: array The SMS message metadata passed from the gateway.
 *
 * @param bool $reset
 *   If true, reset the accounts cache.
 *
 * @return mixed
 *   No uid set: An array, key = uid, value = An associative array of account
 *    metadata.
 *   uid set, no metadata set: An associative array of account metadata.
 *   uid set, metadata set: Cache the metadata for the user, return TRUE.
 */
function sms_user_login_metadata($uid = NULL, $metadata = NULL, $reset = FALSE) {
  static $accounts = array();

  if ($reset) {
    $accounts = array();
  }

  if (!isset($uid)) {
    return $accounts;
  }

  if (isset($metadata)) {
    $accounts[$uid] = $metadata;
    return TRUE;
  }
  elseif (isset($accounts[$uid])) {
    return $accounts[$uid];
  }
  else {
    return FALSE;
  }
}

/**
 * Internal function to swap user.
 *
 * Safely Impersonating Another User.
 * https://drupal.org/node/218104
 * Called once to login, and once to logout. Does not nest.
 *
 * @param object $account
 *  The account object of the user to log in; or none to log out and restore
 *  the previous user and session.
 */
function _sms_user_switch(AccountInterface $account = NULL) {
  if ($account) {
    \Drupal::service('account_switcher')->switchTo($account);
    \Drupal::moduleHandler()->invokeAll('user_login', [$account]);
    \Drupal::logger('sms_user')->info('%name was logged in using SMS.', array('%name' => $account->getUsername()));
  }
  else {
    \Drupal::service('account_switcher')->switchBack();
    $account = \Drupal::currentUser();
    \Drupal::logger('sms_user')->info('%name was restored as logged in using SMS.', array('%name' => $account->getUsername()));
  }
}

/**
 * Registers a new user via SMS
 *
 * @param string $number
 *   The user's mobile number.
 * @param string $message
 *   Body of the SMS message.
 * @param array $options
 *   An associative array of metadata passed from the incoming gateway.
 *
 * @return object|bool
 *   The user object of the created user, false if registration failed.
 */
function sms_user_register_new_user($number, $message, $options) {
  $edit = array();

  // If we have a from address from the e-mail gateway, use it, otherwise
  // leave the e-mail fields blank.
  $mail = isset($options['sms_email_gateway_from']) ? $options['sms_email_gateway_from'] : '';

  // Pass in sms_user specific data for saving.
  $edit['sms_user'] = array(
    'number' => $number,
    'status' => SMS_USER_SMS_REGISTERED,
    'code' => '',
    'gateway' => array(),
  );

  $edit['timezone'] = '';
  // If by chance there's already a user with the same email address, then use
  // it instead of creating a new user.
  $ids = \Drupal::entityQuery('user')
    ->condition('mail', $mail)
    ->execute();
  if (!empty($mail) && ($account = array_shift(User::loadMultiple($ids)))) {
    $account = User::create($edit);
  }
  else {
    $edit['mail'] = $edit['init'] = $mail;

    $config = \Drupal::config('sms_user.settings');
    // Add password if enabled.
    if ($config->get('allow_password')) {
      $lines = explode("\n", $message);
      $words = explode(" ", $lines[0]);
      foreach ($words as $word) {
        if (trim($word)) {
          $edit['pass'] = preg_replace('/\s+/', '-', $word);
          break;
        }
      }
    }
    // Auto-generated password.
    if (!isset($edit['pass']) || !$edit['pass']) {
      $edit['pass'] = user_password();
    }

    // Pick a pseudo-random name for the user -- using the email
    // address would be a privacy violation.
    $edit['name'] = substr(md5($number . strval(REQUEST_TIME)), 0, 10);

    // Save the user.
    $edit['status'] = \Drupal::config('user.settings')->get('register') == USER_REGISTER_VISITORS;
    $account = User::create($edit);
    $account->save();
    \Drupal::logger('sms_user')->info('%name was created using SMS.', array('%name' => $account->getUsername()));
  }

  // Verify that the account was created.
  if (is_object($account)) {
    $metadata = array(
      'register' => TRUE,
      'number' => $number,
      'message' => $message,
      'options' => $options,
    );
    sms_user_login_metadata($account->id(), $metadata);
    if ($account->isActive()) {
      // User account is directly enabled.
      _sms_user_switch($account);
    }
    \Drupal::moduleHandler()->invokeAll('user_login', $edit, $account);

    return $account;
  }

  return FALSE;

}

/**
 * Authenticates a user based on mobile number.
 *
 * @param string $number
 *   The number to authenticate against. For security, this should only be
 *   provided by incoming messages, not through user input.
 *
 * @return object|false
 *   The account that was authenticated or false if none.
 */
function sms_user_authenticate($number) {
  if ($uid = sms_user_get_uid($number)) {
    $ids = \Drupal::entityQuery('user')
      ->condition('uid', $uid)
      ->condition('status', 1)
      ->execute();
    $account = User::loadMultiple($ids);
    $account = reset($account);
    if (!empty($account)) {
      \Drupal::logger('sms_user')->info('%name was authenticated using SMS.', array('%name' => $account->getUserName()));
      return $account;
    }
    else {
      return false;
    }
  }
  else {
    return false;
  }
}

/**
 * Implements hook_feeds_processor_targets_alter()
 *
 * Allows for setting Phonenumber, Status and Gateway using feeds.
 *
 * @param array $targets
 *   The targets for the feeds processor
 * @param string $entity_type
 *   The entity type identifier.
 * @param string $bundle
 *   The entity bundle identifier.
 */
function sms_user_feeds_processor_targets_alter(&$targets, $entity_type, $bundle) {
  $targets['sms_user_phonenumber'] = array(
      'name' => t('SMS User Phonenumber'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
  $targets['sms_user_status'] = array(
      'name' => t('SMS User Status'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
  $targets['sms_user_gateway'] = array(
      'name' => t('SMS User Gateway'),
      'description' => t('The Phone number for the user to be used in the SMS Framework.'),
      'optional_unique' => TRUE,
      'callback' => '_sms_user_feedsprocess_set_value'
  );
}

/**
 * Sets the values for the three fields supported for feeds.
 *
 * Callback function for hook_feeds_processor_targets_alter.
 *
 * @param object $source
 * @param object $target_item
 * @param object $target
 * @param string $value
 * @param array $mapping
 */
function _sms_user_feedsprocess_set_value($source, $target_item, $target, $value, $mapping) {
  switch($target) {
    case 'sms_user_phonenumber':
      $target_item->sms_user['number'] = $value;
      break;
    case 'sms_user_status':
      $target_item->sms_user['status'] = $value;
      break;
    case 'sms_user_gateway':
      $target_item->sms_user['gateway'] = $value;
      break;
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function sms_user_entity_property_info_alter(&$info) {
  $properties = &$info['user']['properties'];
  $properties['sms_user_phone_number'] = array(
      'label' => t("Phone Number"),
      'description' => t("The users mobile phone number."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => FALSE,
  );
  $properties['sms_user_status'] = array(
      'label' => t("SMS Status"),
      'description' => t("The users status of the Mobile Phone number."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => TRUE,
  );
  $properties['sms_user_gateway'] = array(
      'label' => t("SMS Gateway"),
      'description' => t("The SMS Gateway for this user."),
      'type' => 'text',
      'getter callback' => 'entity_property_sms_user_get_properties',
      'computed' => TRUE,
      'required' => FALSE,
  );

}

/**
 * Gets properties for the sms_user_entity_property_info_alter() function.
 *
 * @param array $data
 *   The associated entity for which the property is sought.
 * @param array $options
 *   An array of options.
 * @param string $name
 *   The name of the property to be returned.
 * @param string $type
 *   The entity type.
 * @param array $info
 *   The entity info.
 *
 * @return string|null
 *   A translated string describing the sms_user entity property.
 *
 * @todo the sms_user appendage to $account object needs to be implemented in a
 * data table in D8
 */
function entity_property_sms_user_get_properties($data, array $options, $name, $type, $info) {
  if (isset($data->uid) && ($data->uid > 0)) {
    $account = User::load($data->uid);
    if (isset($account->sms_user)) {
      switch ($name) {
        case "sms_user_phone_number":
          return isset($account->sms_user['number']) ? $account->sms_user['number'] : '';

        case "sms_user_status":
          if (!isset($account->sms_user['status'])) return t('Blocked');
          switch ($account->sms_user['status']) {
            case SMS_USER_BLOCKED:
              return t('Blocked');

            case SMS_USER_PENDING:
              return t('Pending');

            case SMS_USER_CONFIRMED:
              return t('Active');

            case SMS_USER_SMS_REGISTERED:
              return t('SMS Registered');

          }

        case "sms_user_gateway" :
          if (is_string($account->sms_user['gateway'])) {
            return $account->sms_user['gateway'];
          }
          break;
      }
    }
  }
  return NULL;
}
