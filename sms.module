<?php

/**
 * @file
 * The core of the SMS Framework. Provides gateway management and API for
 * sending and receiving SMS messages.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_cron().
 */
function sms_cron() {
  /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
  $phone_number_provider = \Drupal::service('sms.phone_number');
  $phone_number_provider->purgeExpiredVerifications();

  /** @var \Drupal\sms\Provider\SmsQueueProcessorInterface $sms_queue_processor */
  $sms_queue_processor = \Drupal::service('sms.queue');
  $sms_queue_processor->processUnqueued();
  $sms_queue_processor->garbageCollection();
}

/**
 * Implements hook_entity_insert().
 */
function sms_entity_insert(EntityInterface $entity) {
  _sms_entity_postsave($entity);
}

/**
 * Implements hook_entity_update().
 */
function sms_entity_update(EntityInterface $entity) {
  _sms_entity_postsave($entity);
}

/**
 * Implements hook_entity_delete().
 */
function sms_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
    $phone_number_provider = \Drupal::service('sms.phone_number');
    $phone_number_provider->deletePhoneVerificationByEntity($entity);
  }
}

/**
 * Respond to saving entities after they have been written to storage.
 *
 * @link https://www.drupal.org/node/2221347
 * @see sms_entity_insert().
 * @see sms_entity_update().
 */
function _sms_entity_postsave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
    $phone_number_provider = \Drupal::service('sms.phone_number');
    $phone_number_provider->updatePhoneVerificationByEntity($entity);
  }
}

/******************************************************************************
 * HELPER FUNCTIONS
 */

/**
 * Formats a number for display using the gateway's formatting functionality.
 *
 * @todo this function has no first party implementations.
 *
 * @param string $number
 *   The number to be formatted.
 * @param array $options
 *   An array of options.
 *
 * @return string
 *   The formatted number.
 */
function sms_format_number($number, array $options = []) {
  /** @var \Drupal\sms\Provider\DefaultSmsProvider $provider */
  $provider = \Drupal::service('sms_provider.default');

  if ($gateway = $provider->getDefaultGateway()) {
    $instance = $gateway->getPlugin();
    $definition = $instance->getPluginDefinition();
    if (!empty($definition['format number']) && function_exists($definition['format number'])) {
      return $definition['format number']($number, $options);
    }
  }

  return $number;
}

/**
 * Converts various sms formats into a common format for use in this module.
 *
 * @param string $number
 *   The sms number to be formatted.
 * @param int $format
 *   Undefined.
 *
 * @return string
 *   The formatted number.
 *
 * @todo Decide if the $format parameter is needed.
 */
function sms_formatter($number, $format = 1) {
  // Remove non-number characters
  $number = preg_replace("/[^0-9]/", '', $number);

  /*
   @todo The only length specification in the international numbering plan is that
   numbers should be a maximum of 15 digits.

   http://en.wikipedia.org/wiki/E.164

   if (strlen($number) > 16) {
   if ($number[0] == 1) {
   $number = ltrim($number, 1);
   }
   else {
   return FALSE;
   }
   }
   elseif (strlen($number) < 10) {
   return FALSE;
   }
   */

  return $number;
}

/**
 * Validates a phone number.
 *
 * This function passes the number to active gateway for further validation if
 * necessary. It also calls hook_sms_validate() so that other modules can
 * implement custom validation.
 *
 * @param string $number
 *   Comma-separated list of recipient numbers to validate. Passed by reference.
 * @param array $options
 *   A list of additional options.
 *
 * @return array
 *   An array of translated errors. Empty if no errors.
 */
function sms_validate_number(&$number, array $options = array()) {
  $errors = array();
  // Ensure there are actual numeric characters, but allow empty strings.
  if ($number !== '' && preg_replace('/[^0-9]/', '', $number) === '') {
    $errors[] = t('Invalid phone number provided.');
    // No need for further validation.
    return $errors;
  }

  // Allow other modules to provide number validation.
  $errors = \Drupal::moduleHandler()->invokeAll('sms_validate_number', [$number, $options]);

  // Allow the default (or the specified in $options) gateway to provide number
  // validation.
  if (isset($options['gateway'])) {
    $gateway = \Drupal\sms\Entity\SmsGateway::load($options['gateway']);
  }
  else {
    /** @var \Drupal\sms\Provider\DefaultSmsProvider $provider */
    $provider = \Drupal::service('sms_provider.default');
    $gateway = $provider->getDefaultGateway();
  }

  if ($gateway && $instance = $gateway->getPlugin()) {
    if ($error = $instance->validateNumbers([$number], $options)) {
      $errors += (array) $error;
    }
  }

  return $errors;
}
