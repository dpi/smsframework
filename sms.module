<?php

/**
 * @file
 * The core of the SMS Framework. Provides gateway management and API for
 * sending and receiving SMS messages.
 */

use Drupal\sms\Exception\PhoneNumberSettingsException;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\sms\Message\SmsMessage;
use Drupal\sms\Message\SmsMessageResultInterface;
use Drupal\sms\Exception\SmsException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;

// Direction codes.
define('SMS_DIR_NONE',  0);
define('SMS_DIR_OUT',   1);
define('SMS_DIR_IN',    2);
define('SMS_DIR_ALL',   4);

/**
 * Implements hook_cron().
 */
function sms_cron() {
  /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
  $phone_number_provider = \Drupal::service('sms.phone_number');
  $phone_number_provider->purgeExpiredVerifications();

  /** @var \Drupal\sms\Provider\SmsQueueProcessorInterface $sms_queue_processor */
  $sms_queue_processor = \Drupal::service('sms.queue');
  $sms_queue_processor->processUnqueued();
  $sms_queue_processor->garbageCollection();
}

/**
 * Implements hook_entity_insert().
 */
function sms_entity_insert(EntityInterface $entity) {
  _sms_entity_postsave($entity);
}

/**
 * Implements hook_entity_update().
 */
function sms_entity_update(EntityInterface $entity) {
  _sms_entity_postsave($entity);
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes verifications for an entity if it is deleted.
 */
function sms_entity_delete(EntityInterface $entity) {
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  $phone_number_provider = \Drupal::service('sms.phone_number');

  // Check the entity uses phone numbers. To save on a SQL call, and to prevent
  // having to install phone number verification for SMS Framework tests which
  // delete entities. Which would otherwise error on non-existent tables.
  try {
    $phone_number_provider->getPhoneNumberSettingsForEntity($entity);
    $verification_storage = \Drupal::entityTypeManager()
      ->getStorage('sms_phone_number_verification');
    $verification_entities = $verification_storage->loadByProperties([
      'entity__target_id' => $entity->id(),
      'entity__target_type' => $entity->getEntityTypeId(),
    ]);
    $verification_storage->delete($verification_entities);
  }
  catch (PhoneNumberSettingsException $e) {
  }
}

/**
 * Respond to saving entities after they have been written to storage.
 *
 * Detects if phone numbers are modified to an entity. If new phone numbers are
 * detected, new phone number verifications are created. If phone numbers are
 * removed, the associated phone number verification is deleted.
 *
 * @see sms_entity_insert().
 * @see sms_entity_update().
 */
function _sms_entity_postsave(EntityInterface $entity) {
  /** @var \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider */
  $phone_number_provider = \Drupal::service('sms.phone_number');

  try {
    $phone_number_settings = $phone_number_provider->getPhoneNumberSettingsForEntity($entity);
    $field_name = $phone_number_settings->get('fields.phone_number');
    if (!empty($field_name)) {
      $items_original = &$entity->original->{$field_name};
      $items = &$entity->{$field_name};
    }
  }
  catch (PhoneNumberSettingsException $e) {
    // Missing phone number configuration for this entity.
  }

  // $items can be unassigned because field_name is not configured, or is NULL
  // because there is no items.
  if (isset($items)) {
    $numbers = [];
    foreach ($items as &$item) {
      $phone_number = $item->value;
      $numbers[] = $phone_number;

      if (!$phone_number_provider->getPhoneVerificationByEntity($entity, $phone_number)) {
        $phone_number_provider->newPhoneVerification($entity, $phone_number);
      }
    }

    if (isset($items_original) && !$items->equals($items_original)) {
      foreach ($items_original as $item) {
        $phone_number = $item->value;
        // A phone number was deleted.
        if (!in_array($phone_number, $numbers)) {
          if ($phone_verification = $phone_number_provider->getPhoneVerificationByEntity($entity, $phone_number)) {
            $phone_verification->delete();
          }
        }
      }
    }
  }
}

/**
 * Sends a message using the active gateway.
 *
 * @param string $number
 *   The destination number.
 * @param string $message
 *   The text of the message to send.
 * @param array $options
 *   An array of additional properties as defined by gateway modules.
 *
 * @return bool
 *   true if the message was sent to the server, false otherwise.
 *
 * @see \Drupal\sms\Provider\DefaultSmsProvider::handleResult().
 */
function sms_send($number, $message, array $options = array()) {
  $sender = isset($options['sender']) ? $options['sender'] : '';
  $sms = new SmsMessage($sender, explode(',', $number), $message, $options, \Drupal::currentUser()->id());
  /** @var \Drupal\sms\Message\SmsMessageResultInterface $result */
  $result = \Drupal::service('sms_provider')->send($sms, $options);
  if ($result instanceof SmsMessageResultInterface) {
    if ($result->getStatus()) {
      return TRUE;
    }
    else {
      // @todo Review all of this.
      $error_message = t('Sending SMS to %number failed.', ['%number' => implode(',', $sms->getRecipients())]);
      if ($message = $result->getErrorMessage()) {
        $error_message .= t(' The gateway said %message.', ['%message' => $message]);
      }
      \Drupal::logger('sms')->error($message);
      throw new SmsException($error_message);
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Queue worker callback for queued incoming messages.
 *
 * @param array $item
 *   An array containing arguments for sending queued message.
 *
 * @see sms_cron_queue_info().
 */
function sms_incoming_queue_worker(array $item) {
  sms_incoming($item['number'], $item['message'], $item['options']);
}

/**
 * Handles incoming messages.
 *
 * Allows gateways modules to pass messages in a standard format for processing.
 * Every implementation of hook_sms_incoming() will be invoked by this method.
 *
 * Additionally, 'sms_incoming' rules event will be invoked if rules module is
 * enabled.
 *
 * @param string $number
 *   The sender's mobile number.
 * @param string $message
 *   The content of the text message.
 * @param array $options
 *   An array of additional options.
 *
 * @deprecated use \Drupal\sms\Provider\SmsProviderInterface::incoming() instead.
 */
function sms_incoming($number, $message, array $options = array()) {
  $sender = isset($options['sender']) ? $options['sender'] : '';
  $sms = new SmsMessage($sender, explode(',', $number), $message, $options, \Drupal::currentUser()->id());
  \Drupal::service('sms_provider')->incoming($sms, $options);
}

/**
 * Handles responses to message transactions.
 *
 * @see \Drupal\sms\Gateway\SmsProviderInterface::receipt
 *
 * @deprecated use \Drupal\sms\Provider\SmsProviderInterface::receipt() instead.
 */
function sms_receipt(array $reports, array $options = []) {
  \Drupal::service('sms_provider')->receipt($reports, $options);
}

/**
 * Form builder for send sms form.
 *
 * Generates a SMS sending form and adds gateway defined elements. The form
 * array that is returned can be merged with an existing form using
 * array_merge().
 *
 * @param bool $required
 *   (optional) true if phone number field is required, false otherwise.
 *
 * @see sms_send_form_submit_validate()
 * @see sms_send_form_submit_submit()
 */
function sms_send_form($required = FALSE) {
  /** @var \Drupal\sms\Provider\DefaultSmsProvider $provider */
  $provider = \Drupal::service('sms_provider.default');

  if ($gateway = $provider->getDefaultGateway()) {
    $instance = $gateway->getPlugin();

    $form['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone number'),
      '#size' => 40,
      '#maxlength' => 16,
      '#required' => $required,
    );

    // Add gateway defined fields
    $form_state = new FormState();
    $form['gateway']['#tree'] = TRUE;
    $form['gateway'] = array_merge($instance->sendForm($form, $form_state), $form['gateway']);

    return $form;
  }

  return NULL;
}

/**
 * Form validation handler for sms_send_form().
 *
 * @see sms_send_form()
 * @see sms_send_form_submit()
 */
function sms_send_form_validate($form, FormStateInterface $form_state) {
  $number = sms_formatter($form_state->getValue('number'));
  $errors = sms_validate_number($number, $form_state->getValue('gateway', array()));
  if ($errors) {
    $form_state->setErrorByName('number', implode("<br />", $errors));
  }
}

/**
 * Form submission handler for sms_send_form().
 *
 * @see sms_send_form()
 * @see sms_send_form_validate()
 */
function sms_send_form_submit($form, FormStateInterface $form_state) {
  sms_send(sms_formatter($form_state->getValue('number')), $form_state->getValue('message'), $form_state->getValue('gateway', array()));
}

/******************************************************************************
 * HELPER FUNCTIONS
 */

/**
 * Formats a number for display using the gateway's formatting functionality.
 *
 * @todo this function has no first party implementations.
 *
 * @param string $number
 *   The number to be formatted.
 * @param array $options
 *   An array of options.
 *
 * @return string
 *   The formatted number.
 */
function sms_format_number($number, array $options = []) {
  /** @var \Drupal\sms\Provider\DefaultSmsProvider $provider */
  $provider = \Drupal::service('sms_provider.default');

  if ($gateway = $provider->getDefaultGateway()) {
    $instance = $gateway->getPlugin();
    $definition = $instance->getPluginDefinition();
    if (!empty($definition['format number']) && function_exists($definition['format number'])) {
      return $definition['format number']($number, $options);
    }
  }

  return $number;
}

/**
 * Converts various sms formats into a common format for use in this module.
 *
 * @param string $number
 *   The sms number to be formatted.
 * @param int $format
 *   Undefined.
 *
 * @return string
 *   The formatted number.
 *
 * @todo Decide if the $format parameter is needed.
 */
function sms_formatter($number, $format = 1) {
  // Remove non-number characters
  $number = preg_replace("/[^0-9]/", '', $number);

  /*
   @todo The only length specification in the international numbering plan is that
   numbers should be a maximum of 15 digits.

   http://en.wikipedia.org/wiki/E.164

   if (strlen($number) > 16) {
   if ($number[0] == 1) {
   $number = ltrim($number, 1);
   }
   else {
   return FALSE;
   }
   }
   elseif (strlen($number) < 10) {
   return FALSE;
   }
   */

  return $number;
}

/**
 * Validates a phone number.
 *
 * This function passes the number to active gateway for further validation if
 * necessary. It also calls hook_sms_validate() so that other modules can
 * implement custom validation.
 *
 * @param string $number
 *   Comma-separated list of recipient numbers to validate. Passed by reference.
 * @param array $options
 *   A list of additional options.
 *
 * @return array
 *   An array of translated errors. Empty if no errors.
 */
function sms_validate_number(&$number, array $options = array()) {
  $errors = array();
  // Ensure there are actual numeric characters, but allow empty strings.
  if ($number !== '' && preg_replace('/[^0-9]/', '', $number) === '') {
    $errors[] = t('Invalid phone number provided.');
    // No need for further validation.
    return $errors;
  }

  // Allow other modules to provide number validation.
  $errors = \Drupal::moduleHandler()->invokeAll('sms_validate_number', [$number, $options]);

  // Allow the default (or the specified in $options) gateway to provide number
  // validation.
  if (isset($options['gateway'])) {
    $gateway = \Drupal\sms\Entity\SmsGateway::load($options['gateway']);
  }
  else {
    /** @var \Drupal\sms\Provider\DefaultSmsProvider $provider */
    $provider = \Drupal::service('sms_provider.default');
    $gateway = $provider->getDefaultGateway();
  }

  if ($gateway && $instance = $gateway->getPlugin()) {
    if ($error = $instance->validateNumbers([$number], $options)) {
      $errors += (array) $error;
    }
  }

  return $errors;
}

/**
 * Returns a direction code
 *
 * Direction codes are one of the SMS_DIR_* constants defined in this module.
 *
 * @param bool $out
 *   Outgoing allowed or not
 * @param bool $in
 *   Incoming allowed or not
 *
 * @return int
 *   The constant that defines this direction combination.
 */
function sms_dir($out, $in) {
  if ( $out &&   $in) {
    return SMS_DIR_ALL;
  }
  if ( $out && !$in) {
    return SMS_DIR_OUT;
  }
  if (!$out &&   $in) {
    return SMS_DIR_IN;
  }
  if (!$out && !$in) {
    return SMS_DIR_NONE;
  }
  return SMS_DIR_NONE;
}

/**
 * Returns an array of E.164 international country calling codes
 *
 * @return array
 *   Associative array of country calling codes and country names.
 */
function sms_country_codes() {
  return \Drupal::config('sms.settings')->get('country_codes');
}
